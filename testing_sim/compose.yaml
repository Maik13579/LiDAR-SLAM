services:
  simulation:
    image: slam:testing_sim
    container_name: husky_simulation
    extends: .common
    command: ros2 launch clearpath_gz simulation.launch.py setup_path:=/root/clearpath rviz:=false world:=myworld

  velodyne_converter:
    extends: .common
    container_name: velodyne_converter
    command: python3 /velodyne_converter.py

  slam:
    extends: .common
    container_name: husky_slam
    volumes:
      - ./slam_config:/slam_config
    command: ros2 launch /slam_config/slam_husky.launch.py

  rviz:
    extends: .common
    container_name: husky_rviz
    volumes:
      - ./slam_config:/slam_config
    command: rviz2 -d /slam_config/husky.rviz --ros-args -r __ns:=/husky -r /tf:=/husky/tf -r /tf_static:=/husky/tf_static -p slam_control_pannel.slam_command_topic:=slam/command -p slam_control_pannel.save_pc_service:=lidar_slam/save_pc -p slam_control_pannel.reset_service:=lidar_slam/reset -p slam_control_pannel.slam_confidence_topic:=slam/confidence

  joystick:
    extends: .common
    container_name: husky_joystick
    volumes:
      - .:/config
      - /dev:/dev #for joystick
    command: ros2 launch teleop_twist_joy teleop-launch.py config_filepath:=/config/joystick.yaml joy_vel:=/husky/cmd_vel

  .common:
    image: slam:testing_sim
    build:
      context: .
      dockerfile: Dockerfile
    privileged: true
    runtime: nvidia
    environment:
      DISPLAY: $DISPLAY
      ROS_DOMAIN_ID: 11
      QT_X11_NO_MITSHM: "1"
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,video,utility,graphics
      RMW_IMPLEMENTATION: rmw_fastrtps_cpp #rmw_cyclonedds_cpp
    network_mode: host
    ipc: host
    stdin_open: true
    volumes:
      - ./clearpath:/root/clearpath